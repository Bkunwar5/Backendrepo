
name: Backend CI/CD

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Run tests
        run: pytest tests/ -v

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install AWS SAM CLI
        run: |
          pip install aws-sam-cli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Prepare Lambda Code Directory
        run: |
          mkdir -p HelloWorldFunction
          mv src/app.py HelloWorldFunction/
          mv requirements.txt HelloWorldFunction/
          # Add more 'mv' lines if other files are needed

      - name: Build Lambda Function
        run: |
          sam build --use-container

      - name: Deploy to AWS
        run: |
          sam deploy \
            --stack-name resume-app \
            --region ${{ secrets.AWS_REGION }} \
            --s3-bucket ${{ secrets.S3_BUCKET }} \
            --capabilities CAPABILITY_IAM \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset

      - name: Attach inline policy to Lambda role
        run: |
          echo "üîç Looking for Lambda function in CloudFormation stack..."

          FUNCTION_NAME=$(aws cloudformation describe-stack-resources \
            --stack-name resume-app \
            --query "StackResources[?ResourceType=='AWS::Lambda::Function'].PhysicalResourceId" \
            --output text)

          echo "‚úÖ Found function: $FUNCTION_NAME"

          if [ -z "$FUNCTION_NAME" ]; then
            echo "‚ùå Lambda function not found in CloudFormation stack."
            exit 1
          fi

          ROLE_NAME=$(aws lambda get-function-configuration \
            --function-name "$FUNCTION_NAME" \
            --query "Role" \
            --output text | awk -F'/' '{print $NF}')

          echo "üîê Attaching policy to role: $ROLE_NAME"

          aws iam put-role-policy \
            --role-name "$ROLE_NAME" \
            --policy-name AllowDynamoDBUpdateItem \
            --policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "dynamodb:UpdateItem",
                  "Resource": "arn:aws:dynamodb:us-west-2:904233132000:table/Visits"
                }
              ]
            }'
